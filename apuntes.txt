## Primero instalamos la aplicación

nest new --nombre de la aplicación
Luego la ejecutamos npm run start:dev
Borramos los archivos que no necesitamos y hacemos los cambios correspondientes
Despues creamos una Carpeta public para levantar un servidor estatico.

  Mirar el HTML y el CSS
  Luego instalamos esta dependencia
  npm i @nestjs/serve-static
  y Luego hacemos la configuracion en el app.module

## Ahora hacemos la configuración de Docker

Creamos un archivo de docker docker-compose.yaml y dentro del archivo hacemos esta configuración:

version: '3'
services:
  db:
    image: mongo:5
    restart: always
    ports:
      - 27017:27017
    environment: 
      MONGODB_DATABASE: pokemon
    volumes:
      - ./mongo:/data/db

Bueno después instalamos esta dependencia:
npm i @nestjs/mongoose mongoose 

## Ahora Hasta donde Vamos hacemos las configuraciones necesarias y levantamos la base y la conectamos con nuestro backend

En el archivo main hacemos un configuración de ruta global de esta manera:
  //Rutas Globales
  app.setGlobalPrefix('api/v1');

en el app.module conectamos el contenedor de docker:
imports: [
    MongooseModule.forRoot('mongodb://localhost:27017/pokemon'), 

Ahora Primero usamos este comando para docker:
docker-compose up -d

Luego levantamos el backend nuevamente: npm run start:dev

## Creamos el archivo RES API 

usamos este comando:
nest g res --nombre_ --no-spec 

Y comprobamos si esta todo correcto...

## Programamos en pokemon.entity

En la Entidad definimos el esquema que tendrá la base de datos:
import { Prop, Schema, SchemaFactory } from "@nestjs/mongoose";
import { Document } from "mongoose";

@Schema()
export class Pokemon extends Document {

    @Prop({
        unique: true,
        index: true,
    })
    name: string;

    @Prop({
        unique: true,
        index: true,
    })
    no: string;
}

export const PokemonSchema = SchemaFactory.createForClass(Pokemon);

Y luego lo Configuramos en el app.module:
import { Module } from '@nestjs/common';
import { PokemonService } from './pokemon.service';
import { PokemonController } from './pokemon.controller';
import { MongooseModule } from '@nestjs/mongoose';
import { Pokemon, PokemonSchema } from './entities/pokemon.entity';

@Module({
  controllers: [PokemonController],
  providers: [PokemonService],
  /*Importamos el Schema para que se cree*/
  imports: [
    MongooseModule.forFeature([
      {
        name: Pokemon.name,
        schema: PokemonSchema,
      }
    ])
  ],
  /*Exportamos el Modudo*/
  exports: [
    MongooseModule
  ]
})

export class PokemonModule {} 

## Programamos en create-pokemon.dto.ts

Primero instalamos esta dependencia: npm i class-validator class-transformer
Luego hacemos una configuración de validaciones globales en el Main
  //Validacion Global
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      /*Convertir al tipo de dato esperado los DTO*/
      transform: true,
      transformOptions:{
        enableImplicitConversion: true,
      }
    })
  );  

Ahora Modificamos asi el create-pokemon.dto.ts:
import { IsInt, IsPositive, IsString, Min, MinLength } from "class-validator";

export class CreatePokemonDto {

    @IsInt()
    @IsPositive()
    @Min(1)
    no: number;

    @IsString()
    @MinLength(1)
    name: string;
}

El update lo dejamos tal y como esta.

Luego de todo esto corremos el backend y comprobamos si todo esta correcto. Igual verificamos si el schema de la base de datos se creo.













##Guardamos los datos en la Base de datos
  Ahora nos dirigimos al pokemon.service donde haremos estatico
  async create(createPokemonDto: CreatePokemonDto) {
    //Esto para que lo guarde en minuscula
    createPokemonDto.name = createPokemonDto.name.toLocaleLowerCase();
    try {
      const pokemon = await this.pokemonModel.create(createPokemonDto);
      return pokemon;
    } catch (error) {
      if(error.code === 1100){
        //Error de que ya Existe 
        throw new BadRequestException(`Pokemon exists in db ${JSON.stringify(error.keyValue)}`);
      }
      //Error que no sabemos
      console.log(error);
      throw new InternalServerErrorException(`Can't create Pokemon - Check server log`)
    }
  }

  para crear datos y que se conecte con la base de datos

  ##Ahora para verificar o mostrar contenido por id o por algun termino se hace de esta manera
    service y el controller

    //term = termino de busqueda
    async findOne(term: string) {
      let pokemon: Pokemon;
      if(!isNaN(+term)){
        pokemon = await this.pokemonModel.findOne({no: term});
      }
      if(!pokemon && isValidObjectId(term)){
        pokemon = await this.pokemonModel.findById(term);
      }
      if(!pokemon){
        pokemon = await this.pokemonModel.findOne({name: term.toLowerCase().trim() })
      }
      if(!pokemon) throw new NotFoundException(`Pokemon with id, name or no "${term}" not found`);

      return pokemon;
    }

    //term = termino de busqueda
    @Get(':term')
    findOne(@Param('term') term: string) {
      return this.pokemonService.findOne(term);
    }

    ##El Mismon caso para el Actualizar un dato. 
    Pero ahora aumentamos un manejo de errores que lo hacemos de esta manera
      //Manejo de Errores
      private handleExceptions(error: any){
        if(error.code === 1100){
        //Error de que ya Existe algo en la BD 
        throw new BadRequestException(`Pokemon exists in db ${JSON.stringify(error.keyValue)}`);
        }
        console.log(error);
        //Error que no sabemos
        throw new InternalServerErrorException(`Can't create Pokemon - Check server logs`)
      }

    ##Custon Pipes
    Vamos a generar una carpeta common donde manejaremos los custons 
    nest g mo common
    lugo de eso generamos una carpeta pipes
    nest g pi common/pipes/parseMongoId --no-spec

    Y hacemos todo lo que esta en parse-mongo etc 
    y lo mismo en remove service etc etc

    ##Ahora empezamos el SEED
    instalamos axios 
    npm i axios 
    y la configuracion de axios lo hacemos en el seed.service. COPIANDO lA URL de la RestApi

    ##Creamos una carpeta llamada interface 
    export interface PokeResponse {
      count: number;
      next: string;
      previous: null;
      results: Result[];
    }

    export interface Result{
      name: string;
      url: string;
    }

    En el archivo que esta en la carpeta creamos esto.

    #